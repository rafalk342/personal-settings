// Generated by kalamine on 2024-07-21
//
// This XKB symbols file should be copied to:
//     /usr/share/X11/xkb/symbols/custom
// or
//     $XKB_CONFIG_ROOT/symbols/custom
//
// File          : custom.xkb_symbols
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : rafalk342
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// custom QWERTY layout
//
// Base layer + dead key
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ ~   │ !   │ @   │ #   │ $   │ %   │ ^   │ &   │ *   │ (   │ )   │ _   │ +   ┃          ┃
// │ `   │ 1   │ 2   │ 3   │ 4   │ 5   │ 6   │ 7   │ 8   │ 9   │ 0   │ -   │ =   ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃ Q   │ W   │ E   │ R   │ T   │ Y   │ U   │ I   │ O   │ P   │ {   │ }   ┃       ┃
// ┃ ↹      ┃     │   ń │   ę │     │     │     │     │     │     │     │ [   │ ]   ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃ A   │ S   │ D   │ F   │ G   │ H   │ J   │ K   │ L   │ :   │ "   │ |   ┃      ┃
// ┃ ⇬       ┃   ą │   ś │   ó │   ł │     │     │     │     │     │** ; │ '   │ \   ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃ |   │ Z   │ X   │ C   │ V   │ B   │ N   │ M   │ <   │ >   │ ?   ┃               ┃
// ┃ ⇧    ┃ \   │   ż │   ź │   ć │     │     │     │     │ ,   │ .   │ /   ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
// AltGr layer
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃          ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
// ┃ ↹      ┃   ! │   @ │   # │   $ │   % │   * │   7 │   8 │   9 │   + │   ~ │     ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
// ┃ ⇬       ┃   \ │   | │   { │   ( │   [ │   = │   4 │   5 │   6 │   - │   _ │     ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃     │     │     │     │     │     │     │     │     │     │     ┃               ┃
// ┃ ⇧    ┃     │   ^ │   & │   } │   ) │   ] │   0 │   1 │   2 │   3 │   ` ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "custom" {
    name[group1]= "custom QWERTY layout";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 1 !
    key <AE02> {[ 2               , at              , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 2 @
    key <AE03> {[ 3               , numbersign      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 3 #
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 4 $
    key <AE05> {[ 5               , percent         , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 5 %
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 6 ^
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 7 &
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 8 *
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 9 (
    key <AE10> {[ 0               , parenright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 0 )

    // Letters, first row
    key <AD01> {[ q               , Q               , exclam          , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // q Q !
    key <AD02> {[ w               , W               , at              , VoidSymbol      , nacute          , Nacute          ]}; // w W @   ń Ń
    key <AD03> {[ e               , E               , numbersign      , VoidSymbol      , eogonek         , Eogonek         ]}; // e E #   ę Ę
    key <AD04> {[ r               , R               , dollar          , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // r R $
    key <AD05> {[ t               , T               , percent         , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // t T %
    key <AD06> {[ y               , Y               , asterisk        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // y Y *
    key <AD07> {[ u               , U               , 7               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // u U 7
    key <AD08> {[ i               , I               , 8               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // i I 8
    key <AD09> {[ o               , O               , 9               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // o O 9
    key <AD10> {[ p               , P               , plus            , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // p P +

    // Letters, second row
    key <AC01> {[ a               , A               , backslash       , VoidSymbol      , aogonek         , Aogonek         ]}; // a A \   ą Ą
    key <AC02> {[ s               , S               , bar             , brokenbar       , sacute          , Sacute          ]}; // s S | ¦ ś Ś
    key <AC03> {[ d               , D               , braceleft       , VoidSymbol      , oacute          , Oacute          ]}; // d D {   ó Ó
    key <AC04> {[ f               , F               , parenleft       , VoidSymbol      , lstroke         , Lstroke         ]}; // f F (   ł Ł
    key <AC05> {[ g               , G               , bracketleft     , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // g G [
    key <AC06> {[ h               , H               , equal           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // h H =
    key <AC07> {[ j               , J               , 4               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // j J 4
    key <AC08> {[ k               , K               , 5               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // k K 5
    key <AC09> {[ l               , L               , 6               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // l L 6
    key <AC10> {[ ISO_Level5_Latch, colon           , minus           , VoidSymbol      , semicolon       , VoidSymbol      ]}; // ; : -   ;

    // Letters, third row
    key <AB01> {[ z               , Z               , asciicircum     , VoidSymbol      , zabovedot       , Zabovedot       ]}; // z Z ^   ż Ż
    key <AB02> {[ x               , X               , ampersand       , VoidSymbol      , zacute          , Zacute          ]}; // x X &   ź Ź
    key <AB03> {[ c               , C               , braceright      , VoidSymbol      , cacute          , Cacute          ]}; // c C }   ć Ć
    key <AB04> {[ v               , V               , parenright      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // v V )
    key <AB05> {[ b               , B               , bracketright    , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // b B ]
    key <AB06> {[ n               , N               , 0               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // n N 0
    key <AB07> {[ m               , M               , 1               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // m M 1
    key <AB08> {[ comma           , less            , 2               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // , < 2
    key <AB09> {[ period          , greater         , 3               , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // . > 3
    key <AB10> {[ slash           , question        , grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // / ? `

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , asciitilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ { ~
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' " _
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // \ |

    // Space bar
    key <SPCE> {[ space           , space           , space           , space           , semicolon       , semicolon       ]}; //         ; ;

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
// vim: ft=xkb:fdm=indent:ts=4:nowrap
