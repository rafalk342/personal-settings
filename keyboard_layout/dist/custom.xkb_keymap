// Generated by kalamine on 2024-07-21
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 custom.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : custom.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : rafalk342
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// custom QWERTY layout
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │ ~   │ !   │ @   │ #   │ $   │ %   │ ^   │ &   │ *   │ (   │ )   │ _   │ +   ┃          ┃
  // │ `   │ 1   │ 2   │ 3   │ 4   │ 5   │ 6   │ 7   │ 8   │ 9   │ 0   │ -   │ =   ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
  // ┃        ┃ Q   │ W   │ E   │ R   │ T   │ Y   │ U   │ I   │ O   │ P   │ {   │ }   ┃       ┃
  // ┃ ↹      ┃     │   ń │   ę │     │     │     │     │     │     │     │ [   │ ]   ┃       ┃
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
  // ┃         ┃ A   │ S   │ D   │ F   │ G   │ H   │ J   │ K   │ L   │ :   │ "   │ |   ┃      ┃
  // ┃ ⇬       ┃   ą │   ś │   ó │   ł │     │     │     │     │     │** ; │ '   │ \   ┃      ┃
  // ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
  // ┃      ┃ |   │ Z   │ X   │ C   │ V   │ B   │ N   │ M   │ <   │ >   │ ?   ┃               ┃
  // ┃ ⇧    ┃ \   │   ż │   ź │   ć │     │     │     │     │ ,   │ .   │ /   ┃ ⇧             ┃
  // ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  // AltGr layer
  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │     │     │     │     │     │     │     │     │     │     │     │     │     ┃          ┃
  // │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
  // ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
  // ┃ ↹      ┃   ! │   @ │   # │   $ │   % │   * │   7 │   8 │   9 │   + │   ~ │     ┃       ┃
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
  // ┃         ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
  // ┃ ⇬       ┃   \ │   | │   { │   ( │   [ │   = │   4 │   5 │   6 │   - │   _ │     ┃      ┃
  // ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
  // ┃      ┃     │     │     │     │     │     │     │     │     │     │     ┃               ┃
  // ┃ ⇧    ┃     │   ^ │   & │   } │   ) │   ] │   0 │   1 │   2 │   3 │   ` ┃ ⇧             ┃
  // ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  partial alphanumeric_keys modifier_keys
  xkb_symbols "custom" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "custom QWERTY layout";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 1 !
    key <AE02> {[ 2               , at              , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 2 @
    key <AE03> {[ 3               , numbersign      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 3 #
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 4 $
    key <AE05> {[ 5               , percent         , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 5 %
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 6 ^
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 7 &
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 8 *
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 9 (
    key <AE10> {[ 0               , parenright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 0 )

    // Letters, first row
    key <AD01> {[ q               , Q               , VoidSymbol      , VoidSymbol      ],[ exclam          , VoidSymbol      ]}; // q Q     !
    key <AD02> {[ w               , W               , nacute          , Nacute          ],[ at              , VoidSymbol      ]}; // w W ń Ń @
    key <AD03> {[ e               , E               , eogonek         , Eogonek         ],[ numbersign      , VoidSymbol      ]}; // e E ę Ę #
    key <AD04> {[ r               , R               , VoidSymbol      , VoidSymbol      ],[ dollar          , VoidSymbol      ]}; // r R     $
    key <AD05> {[ t               , T               , VoidSymbol      , VoidSymbol      ],[ percent         , VoidSymbol      ]}; // t T     %
    key <AD06> {[ y               , Y               , VoidSymbol      , VoidSymbol      ],[ asterisk        , VoidSymbol      ]}; // y Y     *
    key <AD07> {[ u               , U               , VoidSymbol      , VoidSymbol      ],[ 7               , VoidSymbol      ]}; // u U     7
    key <AD08> {[ i               , I               , VoidSymbol      , VoidSymbol      ],[ 8               , VoidSymbol      ]}; // i I     8
    key <AD09> {[ o               , O               , VoidSymbol      , VoidSymbol      ],[ 9               , VoidSymbol      ]}; // o O     9
    key <AD10> {[ p               , P               , VoidSymbol      , VoidSymbol      ],[ plus            , VoidSymbol      ]}; // p P     +

    // Letters, second row
    key <AC01> {[ a               , A               , aogonek         , Aogonek         ],[ backslash       , VoidSymbol      ]}; // a A ą Ą \ 
    key <AC02> {[ s               , S               , sacute          , Sacute          ],[ bar             , brokenbar       ]}; // s S ś Ś | ¦
    key <AC03> {[ d               , D               , oacute          , Oacute          ],[ braceleft       , VoidSymbol      ]}; // d D ó Ó {
    key <AC04> {[ f               , F               , lstroke         , Lstroke         ],[ parenleft       , VoidSymbol      ]}; // f F ł Ł (
    key <AC05> {[ g               , G               , VoidSymbol      , VoidSymbol      ],[ bracketleft     , VoidSymbol      ]}; // g G     [
    key <AC06> {[ h               , H               , VoidSymbol      , VoidSymbol      ],[ equal           , VoidSymbol      ]}; // h H     =
    key <AC07> {[ j               , J               , VoidSymbol      , VoidSymbol      ],[ 4               , VoidSymbol      ]}; // j J     4
    key <AC08> {[ k               , K               , VoidSymbol      , VoidSymbol      ],[ 5               , VoidSymbol      ]}; // k K     5
    key <AC09> {[ l               , L               , VoidSymbol      , VoidSymbol      ],[ 6               , VoidSymbol      ]}; // l L     6
    key <AC10> {[ ISO_Level3_Latch, colon           , semicolon       , VoidSymbol      ],[ minus           , VoidSymbol      ]}; // ; : ;   -

    // Letters, third row
    key <AB01> {[ z               , Z               , zabovedot       , Zabovedot       ],[ asciicircum     , VoidSymbol      ]}; // z Z ż Ż ^
    key <AB02> {[ x               , X               , zacute          , Zacute          ],[ ampersand       , VoidSymbol      ]}; // x X ź Ź &
    key <AB03> {[ c               , C               , cacute          , Cacute          ],[ braceright      , VoidSymbol      ]}; // c C ć Ć }
    key <AB04> {[ v               , V               , VoidSymbol      , VoidSymbol      ],[ parenright      , VoidSymbol      ]}; // v V     )
    key <AB05> {[ b               , B               , VoidSymbol      , VoidSymbol      ],[ bracketright    , VoidSymbol      ]}; // b B     ]
    key <AB06> {[ n               , N               , VoidSymbol      , VoidSymbol      ],[ 0               , VoidSymbol      ]}; // n N     0
    key <AB07> {[ m               , M               , VoidSymbol      , VoidSymbol      ],[ 1               , VoidSymbol      ]}; // m M     1
    key <AB08> {[ comma           , less            , VoidSymbol      , VoidSymbol      ],[ 2               , VoidSymbol      ]}; // , <     2
    key <AB09> {[ period          , greater         , VoidSymbol      , VoidSymbol      ],[ 3               , VoidSymbol      ]}; // . >     3
    key <AB10> {[ slash           , question        , VoidSymbol      , VoidSymbol      ],[ grave           , VoidSymbol      ]}; // / ?     `

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ asciitilde      , VoidSymbol      ]}; // [ {     ~
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ underscore      , VoidSymbol      ]}; // ' "     _
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |

    // Space bar
    key <SPCE> {[ space           , space           , semicolon       , semicolon       ],[ space           , space           ]}; //     ; ;

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
